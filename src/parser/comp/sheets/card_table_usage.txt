import pandas as pd
from card_table_model import CardTable          # the PySide-6 version you just saw

# 1. Load or build the DataFrame -------------------------------------------------
df = pd.read_excel("sales_2024.xlsx")           # any source works (CSV, SQL, …)

# 2. Create the CardTable --------------------------------------------------------
card_table = CardTable.from_dataframe(df)

# ───────── What happens inside ──────────────────────────────────────────────────
# • for every df column (by index) it:
#     - measures string lengths of all cells
#     - builds an immutable _CardSize(min, avg, max)
#     - creates Card(id=idx, title=column_name, size=..., order=idx)
# • collects the  Card objects into a list and stores them
#
# Result:
#     card_table.cards            -> iterable of Card (one per column)
#     card_table.orderChanged     -> Signal() fired on any reorder/disable/enable
#     card_table.visibilityChanged-> Signal() fired on any visibility toggle

# 3. Hook it to your Qt models ---------------------------------------------------
normal_view_model = DataFrameModel(df, card_table)   # table-1
card_view_model   = CardRowModel(df, card_table)     # table-2 (per-row cards)

# 4. In the UI you mutate via CardTable only -------------------------------------
card_table.disable(3)           # hide + push column-3 to bottom
card_table.reorder(1, 5)        # move column-1 to position-5
card_table.enable(3)            # restore column-3 (previous order comes back)

# Both Qt views refresh automatically because they connected
#   card_table.orderChanged / visibilityChanged
#
# 5. Export filtered DataFrame ----------------------------------------------------
visible_cols = [c.title for c in sorted(card_table.cards,
                                        key=lambda c: c.order)
                if c.is_visible]
df[visible_cols].to_excel("filtered.xlsx", index=False)